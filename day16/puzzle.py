"""day 16"""import numpy as npclass Beam(object):    North = (-1, 0)    East = (0, 1)    South = (1, 0)    West = (0, -1)    FirstDir = {'.' : East,                '/' : North,                '\\': South,                '|' : South,                '-' : East}    def __init__(self, p, d):        self.p = p        self.d = d        self.history = [(p, d),]        self.terminated = False    def step(self, grid):        if self.terminated:            return        new_beam = None        new_pos = (self.p[0] + self.d[0], self.p[1] + self.d[1])        if new_pos[0] < 0 or new_pos[0] == grid.shape[0] or \           new_pos[1] < 0 or new_pos[1] == grid.shape[1]:            self.terminated = True            return        new = grid[new_pos]        match new:            case '.':                pass            case '-':                if self.d == Beam.East or self.d ==  Beam.West:                    pass                else:                    self.d = Beam.West                    new_beam = Beam(new_pos, Beam.East)            case '|':                if self.d == Beam.North or self.d == Beam.South:                    pass                else:                    self.d = Beam.North                    new_beam = Beam(new_pos, Beam.South)            case '/':                if self.d == Beam.East:                    self.d = Beam.North                elif self.d == Beam.South:                    self.d = Beam.West                elif self.d == Beam.West:                    self.d = Beam.South                elif self.d == Beam.North:                    self.d = Beam.East            case '\\':                if self.d == Beam.East:                    self.d = Beam.South                elif self.d == Beam.South:                    self.d = Beam.East                elif self.d == Beam.West:                    self.d = Beam.North                elif self.d == Beam.North:                    self.d = Beam.West        self.p = new_pos        if (self.p, self.d) in self.history:            self.terminated = True            return        self.history.append((self.p, self.d))        return new_beamfid = open("input.txt")grid = np.array([list(i) for i in fid.read().split('\n')])# part 1b = Beam((0, 0), Beam.FirstDir[grid[0, 0]])beams = [b]def run(beam, grid):    while not beam.terminated:        _new_beam = beam.step(grid)        if _new_beam is not None:            beam_exists = False                        for i in beams:                if (_new_beam.p, _new_beam.d) in i.history:                    beam_exists = True            if not beam_exists:                beams.append(_new_beam)                run(_new_beam, grid)run(b, grid)res_grid = np.zeros(grid.shape)for i in beams:    for k in i.history:        res_grid[k[0]] += 1p1 = len(res_grid.flatten().nonzero()[0])print('result part 1', p1)