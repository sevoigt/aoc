"""day 16"""import numpy as npclass Beam(object):    North = (-1, 0)    East = (0, 1)    South = (1, 0)    West = (0, -1)    def __init__(self, p, d, starter=False):        self.p = p        self.d = d        self.history = list() if starter else [(p, d),]        self.terminated = False    def step(self, grid):        if self.terminated:            return        new_beam = None        new_pos = (self.p[0] + self.d[0], self.p[1] + self.d[1])        if new_pos[0] < 0 or new_pos[0] == grid.shape[0] or \           new_pos[1] < 0 or new_pos[1] == grid.shape[1]:            self.terminated = True            return        new = grid[new_pos]        match new:            case '.':                pass            case '-':                if self.d == Beam.East or self.d == Beam.West:                    pass                else:                    self.d = Beam.West                    new_beam = Beam(new_pos, Beam.East)            case '|':                if self.d == Beam.North or self.d == Beam.South:                    pass                else:                    self.d = Beam.North                    new_beam = Beam(new_pos, Beam.South)            case '/':                if self.d == Beam.East:                    self.d = Beam.North                elif self.d == Beam.South:                    self.d = Beam.West                elif self.d == Beam.West:                    self.d = Beam.South                elif self.d == Beam.North:                    self.d = Beam.East            case '\\':                if self.d == Beam.East:                    self.d = Beam.South                elif self.d == Beam.South:                    self.d = Beam.East                elif self.d == Beam.West:                    self.d = Beam.North                elif self.d == Beam.North:                    self.d = Beam.West        self.p = new_pos        if (self.p, self.d) in self.history:            self.terminated = True            return        self.history.append((self.p, self.d))        return new_beamfid = open("input.txt")grid = np.array([list(i) for i in fid.read().split('\n')])# part 1b = Beam((0, -1), Beam.East, starter=True)beams = [b]def run(beam, grid):    while not beam.terminated:        _new_beam = beam.step(grid)        if _new_beam is not None:            beam_exists = False            for i in beams:                if (_new_beam.p, _new_beam.d) in i.history:                    beam_exists = True            if not beam_exists:                beams.append(_new_beam)                run(_new_beam, grid)def score():    res_grid = np.zeros(grid.shape)    for i in beams:        for k in i.history:            res_grid[k[0]] += 1    return len(res_grid.flatten().nonzero()[0])run(b, grid)p1 = score()print('result part 1', p1)# part 2scores = list()for i in range(grid.shape[0]):    # western edge    b = Beam((i, -1), Beam.East, starter=True)    beams = [b]    run(b, grid)    scores.append(score())    # eastern edge    b = Beam((i, grid.shape[1]+1), Beam.West, starter=True)    beams = [b]    run(b, grid)    scores.append(score())for i in range(grid.shape[1]):    # northern edge    b = Beam((-1, i), Beam.South, starter=True)    beams = [b]    run(b, grid)    scores.append(score())    # southern edge    b = Beam((grid.shape[0]+1, i), Beam.North, starter=True)    beams = [b]    run(b, grid)    scores.append(score())p2 = max(scores)print('resupt part 2', p2)