"""day 19"""from functools import partialclass Workflow(object):    def __init__(self, name):        self.name = name        self.steps = list()        self.last = None    def process(self, part):        for cat, func, nxt in self.steps:            if func(part[cat]):                return nxt        return self.lastdef gt(a, b):    return a > bdef lt(a, b):    return a < bfid = open('input.txt')workflows, parts = fid.read().split('\n\n')workflows = workflows.split('\n')parts = parts.split('\n')wf = dict()for i in workflows:    name, st = i.split('{')    w = Workflow(name)    st = st[:-1].split(',')    w.last = st[-1]    for s in st[:-1]:        cat = s[0]        val, nxt = s.split(':')        val = int(val[2:])        if s[1] == '>':            func = partial(gt, b=val)        elif s[1] == '<':            func = partial(lt, b=val)        else:            raise ValueError('unknown: ', s[1])        w.steps.append((cat, func, nxt))    wf.update({name: w})prt = []for i in parts:    p = {'sum': 0}    for k in i[1:-1].split(','):        key, val = k.split('=')        val = int(val)        p.update({key: val})        p['sum'] += val    prt.append(p)# part 1accepted = list()for p in prt:    pp = wf['in'].process(p)    while pp not in ('R', 'A'):        pp = wf[pp].process(p)    if pp == 'A':        accepted.append(p)p1 = sum([i['sum'] for i in accepted])print('result part 1', p1)